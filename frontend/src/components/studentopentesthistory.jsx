import React, { Component } from 'react';
import { Link } from 'react-router-dom';

class Studentopentesthistory extends Component {
  state = {
    prevTest: null,
    loading: true,
    error: null,
    searchTerm: '',
    itemsPerPage: 10,
  };

  componentDidMount() {
    this.fetchTestHistory();
  }

  fetchTestHistory = () => {
    try {
      const jwt = localStorage.getItem("jwt");
      if (!jwt) {
        this.setState({ 
          loading: false, 
          error: "Authentication error: Please login again" 
        });
        return;
      }

      const user = {
        email: JSON.parse(jwt).user.id
      };

      fetch("http://localhost:8082/studenttesthistory", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(user)
      })
        .then(res => {
          if (!res.ok) {
            throw new Error(`Server responded with status: ${res.status}`);
          }
          return res.json();
        })
        .then(res => {
          if (!res.data) {
            this.setState({ 
              loading: false, 
              error: "No test history found", 
              prevTest: [] 
            });
          } else {
            this.setState({
              prevTest: res.data,
              loading: false,
              error: null
            });
          }
        })
        .catch(error => {
          console.error("Error fetching test history:", error);
          this.setState({ 
            loading: false, 
            error: `Failed to load test history: ${error.message}` 
          });
        });
    } catch (error) {
      console.error("Error in fetchTestHistory:", error);
      this.setState({ 
        loading: false, 
        error: `An unexpected error occurred: ${error.message}` 
      });
    }
  };

  formatDate = (str) => {
    if (!str) return "N/A";
    try {
      const parts = str.split('T');
      if (parts.length !== 2) return str;
      
      const time = parts[1].split('.');
      return `${parts[0]} ${time[0]}`;
    } catch (error) {
      console.error("Date formatting error:", error);
      return str;
    }
  }

  handleSearchChange = (e) => {
    this.setState({ searchTerm: e.target.value });
  }

  handleItemsPerPageChange = (e) => {
    this.setState({ itemsPerPage: parseInt(e.target.value) });
  }

  filterTests = () => {
    const { prevTest, searchTerm } = this.state;
    if (!prevTest) return [];
    
    return prevTest.filter(test => 
      test.testid.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
      test.tid.toString().toLowerCase().includes(searchTerm.toLowerCase())
    );
  }

  render() {
    const { loading, error, itemsPerPage, searchTerm } = this.state;
    const filteredTests = this.filterTests();

    if (loading) {
      return (
        <div className="container-fluid text-center pt-5">
          <div className="spinner-border text-primary" role="status">
            <span className="sr-only">Loading...</span>
          </div>
          <p className="mt-2">Loading test history...</p>
        </div>
      );
    }

    return (
      <div className="container-fluid">
        <center><h3 className="text-dark mb-4">Previous Tests Given</h3></center>
        
        {error && (
          <div className="alert alert-danger" role="alert">
            {error}
          </div>
        )}
        
        <div className="card shadow">
          <div className="card-header py-3">
            <p className="text-primary m-0 font-weight-bold">Test Info</p>
          </div>
          <div className="card-body">
            <div className="row">
              <div className="col-md-6 text-nowrap">
                <div id="dataTable_length" className="dataTables_length" aria-controls="dataTable">
                  <label>
                    Show&nbsp;
                    <select 
                      className="form-control form-control-sm custom-select custom-select-sm"
                      value={itemsPerPage}
                      onChange={this.handleItemsPerPageChange}
                    >
                      <option value="10">10</option>
                      <option value="25">25</option>
                      <option value="50">50</option>
                      <option value="100">100</option>
                    </select>
                    &nbsp;entries
                  </label>
                </div>
              </div>
              <div className="col-md-6">
                <div className="text-md-right dataTables_filter" id="dataTable_filter">
                  <label>
                    <input 
                      type="search" 
                      className="form-control form-control-sm" 
                      aria-controls="dataTable" 
                      placeholder="Search"
                      value={searchTerm}
                      onChange={this.handleSearchChange}
                    />
                  </label>
                </div>
              </div>
            </div>
            
            {filteredTests.length === 0 ? (
              <div className="text-center py-4">
                <p className="text-muted">No test history found</p>
              </div>
            ) : (
              <div className="table-responsive table mt-2" id="dataTable" role="grid" aria-describedby="dataTable_info">
                <table className="table dataTable my-0" id="dataTable">
                  <thead>
                    <tr>
                      <th>S.No</th>
                      <th>Teacher ID</th>
                      <th>Test ID</th>
                      <th>Marks</th>
                      <th>View Analysis</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredTests.slice(0, itemsPerPage).map((test, index) => (
                      <tr key={index}>
                        <td>{index + 1}</td>
                        <td>{test.tid}</td>
                        <td>{test.testid}</td>
                        <td>{test.marks}</td>
                        <td>
                          <Link 
                            to={`/viewTestanalysis/?id=${test.testid}`} 
                            className="btn btn-sm btn-primary"
                          >
                            View Analysis
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot>
                    <tr>
                      <td><strong>S.No</strong></td>
                      <td><strong>Teacher ID</strong></td>
                      <td><strong>Test ID</strong></td>
                      <td><strong>Marks</strong></td>
                      <td><strong>View Analysis</strong></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
            
            <div className="row">
              <div className="col-md-6">
                <p className="text-muted">
                  Showing {filteredTests.length > 0 ? 1 : 0} to {Math.min(itemsPerPage, filteredTests.length)} of {filteredTests.length} entries
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

export default Studentopentesthistory;